#**************i**************************************************************
# Edit this file to change code options, library paths, and compiler flags
#****************************************************************************

# Spatial resolution (grid points in X,Y,Z)
NX       = 
NY       = 64
NZ       = 64

# ORD:     number of iterations in the Runge-Kutta method
ORD      = 2

# SOLVER:  (read the file SOLVERS for a list of options)
SOLVER   = ROTBOUSS_SGS

# PRECISION: (SINGLE or DOUBLE)
PRECISION= SINGLE

# Box size:
# ARBSIZE=yes  # Box size defined by the user
# ARBSIZE=no   # 2.pi periodic box
ARBSIZE  = no

# IOLIB:
# posix    builds POSIX I/O
# mpiio    builds MPI I/O
IOLIB    = mpiio

# Parallelization model:
# P_HYBRID=no   # MPI-based parallelization only
# P_HYBRID=yes  # OpenMP-MPI hybridization
# P_HYBRID=offl # OpenMP-MPI with offloading to GPUs
P_HYBRID = no

# Parallelization model for accelerators:
# P_CUDA=yes    # CUDA-MPI (or CUDA-OpenMP-MPI) hybridization
# P_CUDA=no     # MPI, hybrid or offloading parallelization without CUDA
P_CUDA   = no

# Lagrangian particles:
# PARTICLES = no         # Do not build Lag. particles
# PARTICLES = lag (=yes) # Build Lag. particles
# PARTICLES = iner       # Build Inertial particles
# PARTICLES = test       # Build Test particles (only with magnetic fields)
PARTICLES = no

# FFTP:
# fftp-2   builds FFTP-2 (links with FFTW 2.x)
# fftp-3   builds FFTP-3 (links with FFTW 3.x)
# fftp-mkl builds FFTP-MKL (links with Intel MKL)
# FFTxDIR contains the path to the FFT libraries. Only the path to the
# version of the FFT that is used is needed, the others can be left empty.
FFTP     = fftp-3
FFTW2DIR = /opt/ohpc/pub/libs/gnu7/fftw/2.1.5
FFTW3DIR = /scratch3/BMC/gsd-hpcs/rosenberg/opt/apps/fftw-3.3.10_gnu_openmpi
MKLDIR   = /opt/ohpc/pub/compiler/intel/mkl/2022.1.0

# ECTOOLS:
ECKITDIR   = /scratch3/BMC/gsd-hpcs/rosenberg/opt/apps/infero_gcc_openmpi
ECKITLIBSZ = lib64
#ECKITLIB   = -lcnpy -leckit -lfckit -linferoapi -linfero -linferof 
ECKITLIB   = -leckit -lfckit -linferoapi -linfero -linferof 
#ONNXDIR    = /scratch3/BMC/gsd-hpcs/rosenberg/opt/apps/onnxruntime_gcc_openmpi_v1.10.0
#ONNXLIB    = -lonnxruntime-genai -lonnxruntime -lonnxruntime_providers_shared 
ONNXDIR    = /scratch3/BMC/gsd-hpcs/rosenberg/opt/apps/infero_gcc_openmpi/lib
ONNXLIB    = -lonnxruntime 

# IKIND    4 in 32 bits machines, 8 in 64 bits machines
# NSTRIP   controls strip mining (often set to 1)
# CSIZE    CPUs: 8 if L1 cache is <= 64 kb, 16 if L1 cache is 128 kb
#          When offloading to GPUs use smaller values, e.g., CSIZE=4
IKIND    = 8
NSTRIP   = 1
CSIZE    = 32

# When UNDER is equal to 1 you can use the variable APPEND 
# to add extra characters at the end of external functions.
UNDER    = 0
APPEND   = _

# Fortran compiler and MPI distribution (see below)
COMPILER   = GNU
MPI        = 
CUCOMPILER = NVIDIA

#****************************************************************************
# Compiler and MPI library dependent section
#****************************************************************************
#
# Portland compiler (PGI)
CPP_PGI       = /usr/bin/cpp -traditional-cpp
FC_PGI        = /opt/pgi/linux86/8.0-5/bin/pgf90
CC_PGI        = /opt/pgi/linux86/8.0-5/bin/pgcc
FFLAGS_PGI    = -fastsse -Minline -Minfo=loop,inline -Mneginfo -g77libs
FPSPEC_PGI    = -fastsse -Minline -Minfo=loop,inline -Mneginfo -g77libs
CFLAGS_PGI    = -fastsse -Minline
PGI_OMP       = -mp
PGI_OFFL      =
TARGET_PGI    =
#
# XLF compiler
CPP_XLF       = /usr/ccs/lib/cpp -P
FC_XLF        = mpxlf90_r
CC_XLF        = mpxlc_r
FFLAGS_XLF    = -q64 -O5 -qenablevmx -qhot=simd -qipa=malloc16 -qvecnvol \
  -qalign -Q -qsuffix=f=f90 -bdatapsize:64K -bstackpsize:64K
FPSPEC_XLF    = -q64 -O5 -qenablevmx -qhot=simd -qipa=malloc16 -qvecnvol \
  -qalign -Q -qsuffix=f=f90 -bdatapsize:64K -bstackpsize:64K
CFLAGS_XLF    = -q64 -O5 -qenablevmx -qhot=simd -qipa=malloc16 -qvecnvol \
  -qalign -Q -bdatapsize:64K -bstackpsize:64K
XLF_OMP       = -qsmp=omp 
XLF_OFFL      =
TARGET_XLF    = -qarch=auto -qtune=auto -qcache=auto
#
# ABSOFT compiler
CPP_ABSOFT    = /usr/bin/cpp -traditional-cpp
FC_ABSOFT     = /usr/absoft/bin/f90
CC_ABSOFT     = /usr/absoft/bin/cc
FFLAGS_ABSOFT = -O -YEXT_SFX=__ -YEXT_NAMES=LCS
FPSPEC_ABSOFT = -O -YEXT_SFX=__ -YEXT_NAMES=LCS
CFLAGS_ABSOFT = -O 
ABSOFT_OMP    = 
PGI_OFFL      =
TARGET_ABSOFT =
#
# INTEL compiler (use UNDER=1 with gcc compiler <4.x, use ifx when offloading)
CPP_INTEL     = /usr/bin/cpp -traditional-cpp -nostdinc
FC_INTEL      = ifort
CC_INTEL      = icc
FFLAGS_INTEL  = -O3 -no-prec-div -fp-model fast=2 -align -heap-arrays
FPSPEC_INTEL  = -O3 -no-prec-div -fp-model fast=2 -align -heap-arrays
CFLAGS_INTEL  = -O3 -no-prec-div -fp-model fast=2 -align -heap-arrays
INTEL_OMP     = -fopenmp 
INTEL_OFFL    = -fiopenmp -fopenmp-targets=spir64
TARGET_INTEL  =
#
# GFortran compiler (GNU)
# CGG >=10.X with some MPI libraries may require using
# "FC_GNU = gfortran -w -fallow-argument-mismatch".
CPP_GNU       = cpp -traditional-cpp
FC_GNU        = mpif90 -w -fallow-argument-mismatch
CC_GNU        = mpicc
FFLAGS_GNU    = -O3 -funroll-loops
FPSPEC_GNU    = -O3 -funroll-loops
CFLAGS_GNU    = -O3
GNU_OMP       = -fopenmp
GNU_OFFL      =
TARGET_GNU    = -mtune=native -mfpmath=both
#
# G95 compiler (G95)
CPP_G95       = /usr/bin/cpp -traditional-cpp -P
FC_G95        = /opt/g95-x86_64-32/bin/g95
CC_G95        = /opt/g95-x86_64-32/bin/gcc
FFLAGS_G95    = -O4 -w
FPSPEC_G95    = -O4 -w
CFLAGS_G95    = -O4 -w
G95_OMP       = 
G95_OFFL      =
TARGET_G95    = -msse

#****************************************************************************
# CUDA compilers & misc. defs:
#****************************************************************************
#
# NVCC NVIDIA CUDA compiler:
CUCC_NVIDIA     = nvcc
CUINC_NVIDIA    = -I/usr/local/cuda/6.5/include
CULIBDIR_NVIDIA = -L/usr/local/cuda/6.5/lib64
CULIB_NVIDIA    = -lcudart -lcufft
CUCFLAGS_NVIDIA = -O3
CUBIND_NVIDIA   = -DCUDA_BIND_DEVICE_
CULDFLAGS_NVIDIA=
CUGENCODE_NVIDIA=
CUARCH_NVIDIA   =
# NSTREAMS = number of streams for asynchronous memcopy and FFT computations.
#            Should be <= the number of slices in each MPI job.
NSTREAMS        = 1
# PPN = <number># number of GPUs per node; required for device affinity.
#                 Can be overridden at runtime by setting MPI_PPN env.
#                 variable. This variable is only used when P_CUDA=yes.
PPN             = 4

#****************************************************************************
#  MPI libraries:
#****************************************************************************
#
# MPICH
MPIINC_MPICH  = -I/opt/mpich2-1.0.5/include
MPILIB_MPICH  = -L/opt/mpich2-1.0.5/lib
MPILD_MPICH   = -lmpich -lmpichf90 -lfmpich -lpthread -lrt -lmpich \
  -lpthread -lrt -luuid
#
# OPENMPI (OPEN)
MPIINC_OPEN = -I/opt/ohpc/pub/mpi/openmpi3-gnu7/3.0.0/include
MPILIB_OPEN = -L/opt/ohpc/pub/mpi/openmpi3-gnu7/3.0.0/lib
MPILD_OPEN  = -pthread -lmpi_usempif08 -lmpi_usempi_ignore_tkr \
  -lmpi_mpifh -lmpi -Wl,--enable-new-dtags -Wl,-rpath \
  -Wl,/opt/ohpc/pub/mpi/openmpi3-gnu7/3.0.0/lib
#
# INTEL MPI (INTEL)
MPIINC_INTEL = -I/opt/ohpc/pub/compiler/intel/mpi/2021.6.0/include \
  -I/opt/ohpc/pub/compiler/intel/mpi/2021.6.0/include/gfortran/7.1.0
MPILIB_INTEL = -L/opt/ohpc/pub/compiler/intel/mpi/2021.6.0/lib/release \
  -L/opt/ohpc/pub/compiler/intel/mpi/2021.6.0/lib
MPILD_INTEL  = -Xlinker --enable-new-dtags -Xlinker -rpath \
  -Xlinker /opt/ohpc/pub/compiler/intel/mpi/2021.6.0/lib/release \
  -Xlinker -rpath -Xlinker /opt/ohpc/pub/compiler/intel/mpi/2021.6.0/lib \
  -lmpifort -lmpi -lrt -lpthread -Wl,-z,now -Wl,-z,relro -Wl,-z,noexecstack \
  -Xlinker --enable-new-dtags -ldl
#
# MPICH-GM (GM)
MPIINC_GM     = -I/usr/local/mpich-gm-62/include
MPILIB_GM     = -L/usr/local/mpich-gm-62/lib -L/opt/gm/lib64
MPILD_GM      = -lmpichf90 -lmpich -lgm
#
# MPICH-VAPI (VAPI)
MPIINC_VAPI   = -I/coral/local/mpich64/include
MPILIB_VAPI   = -L/coral/local/mpich64/lib64/shared \
  -L/coral/local/mpich64/lib64 -L/lib64
MPILD_VAPI    = -lmpichf90 -lmpichfarg -lmpich -libt -lpublic -lmpicm \
  -lmtl_common -lvapi -lmpga -lmosal -lpthread
#
# lam-mpi (LAM)
MPIINC_LAM    = -I/opt/lam-6.5.7/include
MPILIB_LAM    = -L/opt/lam-6.5.7/lib
MPILD_LAM     = -llamf77mpi -lmpi -llam
#
# MPICH2 for MAC (MAC)
MPIINC_MAC    = -I/usr/local/include
MPILIB_MAC    = -L/usr/local/lib -L/usr/lib
MPILD_MAC     = -lpmpich -lmpich -lSystemStubs
#****************************************************************************
