! Initial condition for the passive/active scalar/density.
! The scalar can be passive (e.g., in the PHD solver) or 
! active (as in the Boussinesq or compressible solvers).
! This file contains the expression used for the initial 
! concentration of the scalar. You can use temporary 
! real arrays R1-R3 of size (1:nx,1:ny,ksta:kend) and temporary 
! complex arrays C1-C8 of size (1:nz,1:ny,ista:iend) to do 
! intermediate computations. The variable c0 should control 
! the global amplitude of the concentration, and variables 
! cparam0-9 can be used to control the amplitudes of individual 
! terms. At the end, the initial concentration of the scalar in 
! spectral space should be stored in the array th.

! Constant uniform passive/active scalar th, and localized
! concentration of the passive/active scalar th1 in a horizontal
! layer near the bottom of the domain. This example works with 
! any multi-scalar solver, but it is inteded to be used in 
! moist Boussinesq simulations to mimic a submerged volcano.
!   c0     : initial uniform concentration of th
!   cc10   : initial concentration of th1
!   sparam2: initial z location of the th1 layer (in [0,1])
!   sparam3: initial thickness of the layer

! Set scalar/density to zero
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
      DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
         DO j = 1,ny
            DO k = 1,nz
               th(k,j,i) = 0.0_GP
            END DO
         END DO
      END DO

! Add a constant scalar/density
      IF (myrank.eq.0) THEN         
         th(1,1,1) = c0*real(nx,kind=GP)*real(ny,kind=GP)*real(nz,kind=GP)
         th(1,1,1) = c0*real(nx,kind=GP)*real(ny,kind=GP)*real(nz,kind=GP)
         th(1,1,1) = c0*real(nx,kind=GP)*real(ny,kind=GP)*real(nz,kind=GP)
      ENDIF

! Water (saturated phase) in a horizontal layer
!$omp parallel do if (kend-ksta.ge.nth) private (j,i)
      DO k = ksta,kend
!$omp parallel do if (kend-ksta.lt.nth) private (i)
         DO j = 1,ny
            DO i = 1,nx
               tmp = (real(k-1,kind=GP)/real(nz-1,kind=GP)-sparam2)**2
               R1(i,j,k) = exp(-tmp**2/(.5*sparam3)**2)
            END DO
         END DO
      END DO
      CALL fftp3d_real_to_complex(planrc,R1,th1,MPI_COMM_WORLD)
      CALL variance(th1,tmp,1)
      CALL MPI_BCAST(tmp,1,MPI_DOUBLE_PRECISION,0,MPI_COMM_WORLD,ierr)
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
      DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
         DO j = 1,ny
            DO k = 1,nz
               th1(k,j,i) = cc10*th1(k,j,i)/sqrt(tmp)
            END DO
         END DO
      END DO
