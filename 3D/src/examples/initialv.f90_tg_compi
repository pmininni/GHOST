! Initial condition for the momentum density. Density
! must be set before computing.
!
! This file contains the expression used for the initial 
! velocity field. You can use temporary real arrays R1-R3 
! of size (1:nx,1:ny,ksta:kend) and temporary complex arrays
! C1-C8 of size (1:nz,1:ny,ista:iend) to do intermediate
! computations. The variable u0 should control the global 
! amplitude of the velocity, and variables vparam0-9 can be
! used to control the amplitudes of individual terms. At the
! end, the three components of the velocity in spectral
! space should be stored in the arrays vx, vy, and vz.

! Superposition of Taylor-Green vortices
!     kdn : minimum wave number (rounded to next integer)
!     kup : maximum wave number (rounded to next integer)

      IF ( abs(Lx-Ly).gt.tiny ) THEN
        IF (myrank.eq.0) &
           PRINT *,'TG initial conditions require at least Lx=Ly'
        STOP
      ENDIF

!$omp parallel do if (iend-ista.ge.nth) private (j,k)
      DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
         DO j = 1,ny
            DO k = 1,nz
               sz(k,j,i) = 0.0_GP
               vz(k,j,i) = 0.0_GP
            END DO
         END DO
      END DO

!$omp parallel do if (kend-ksta.ge.nth) private (j,i)
      DO k = ksta,kend
!$omp parallel do if (kend-ksta.lt.nth) private (i)
         DO j = 1,ny
            DO i = 1,nx

            R1(i,j,k) = 0.0_GP
            R2(i,j,k) = 0.0_GP

            DO ki = INT(kdn),INT(kup)
               R1(i,j,k) = R1(i,j,k)+SIN(2*pi*ki*(real(i,kind=GP)-1)/ &
                          real(nx,kind=GP))*COS(2*pi*ki*(real(j,kind=GP)-1)/ &
                          real(ny,kind=GP))*COS(2*pi*ki*(real(k,kind=GP)-1)/ &
                          real(nz,kind=GP))
               R2(i,j,k) = R2(i,j,k)-COS(2*pi*ki*(real(i,kind=GP)-1)/ &
                          real(nx,kind=GP))*SIN(2*pi*ki*(real(j,kind=GP)-1)/ &
                          real(ny,kind=GP))*COS(2*pi*ki*(real(k,kind=GP)-1)/ &
                          real(nz,kind=GP))
            END DO

            END DO
         END DO
      END DO

      CALL fftp3d_real_to_complex(planrc,R1,vx,MPI_COMM_WORLD)
      CALL fftp3d_real_to_complex(planrc,R2,vy,MPI_COMM_WORLD)

! We do not normalize if the want the velocity to be given 
! just by sine, cosine with amplitude 1
      CALL normalize(vx,vy,vz,u0,1,MPI_COMM_WORLD)

#if !defined(DENSITY_)
  #error "DENSITY_ not defined"
#endif

#if defined(MOM_)
      ! Dealias:
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
      DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
         DO j = 1,ny
            DO k = 1,nz
               C1(k,j,i) = vx (k,j,i)
               C2(k,j,i) = vy (k,j,i)
               C3(k,j,i) = rho(k,j,i)
               IF (kn2(k,j,i).gt.kmax) THEN
                  C1 (k,j,i) = 0.0_GP
                  C2 (k,j,i) = 0.0_GP
                  C3 (k,j,i) = 0.0_GP
               ENDIF
            END DO
         END DO
      END DO

      CALL fftp3d_complex_to_real(plancr,C1 ,R1,MPI_COMM_WORLD)
      CALL fftp3d_complex_to_real(plancr,C2 ,R2,MPI_COMM_WORLD)
      CALL fftp3d_complex_to_real(plancr,C3 ,R3,MPI_COMM_WORLD)

      tmp = 1.0_GP/ &
            (real(nx,kind=GP)*real(ny,kind=GP)*real(nz,kind=GP))**2

!$omp parallel do if (kend-ksta.ge.nth) private (j,i)
      DO k = ksta,kend
!$omp parallel do if (kend-ksta.lt.nth) private (i)
         DO j = 1,ny
            DO i = 1,nx
               R1(i,j,k) = R1(i,j,k)*R3(i,j,k) * tmp
               R2(i,j,k) = R2(i,j,k)*R3(i,j,k) * tmp
            END DO
         END DO
      END DO

      CALL fftp3d_real_to_complex(planrc,R1,sx,MPI_COMM_WORLD)
      CALL fftp3d_real_to_complex(planrc,R2,sy,MPI_COMM_WORLD)

#endif
