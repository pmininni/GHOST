! Initial condition for the velocity field.
! This file contains the expression used for the initial 
! velocity field. You can use temporary real arrays R1-R3 
! of size (1:nx,1:ny,ksta:kend) and temporary complex arrays
! C1-C8 of size (1:nz,1:ny,ista:iend) to do intermediate
! computations. The variable u0 should control the global 
! amplitude of the velocity, and variables vparam0-9 can be
! used to control the amplitudes of individual terms. At the
! end, the three components of the velocity in spectral
! space should be stored in the arrays vx, vy, and vz.

! Example of initial conditions and forcing for the penalty method.
! This example creates a sphere centered in (x0,y0,z0) with
! radius given by 'radius'. It also creates a grid on one of
! the sides of the domain. The penalty function is stored in
! real space in the array chi of size (1:nx,1:ny,ksta:kend).
! It is assumed that this file is used together with null
! forcing. Make sure that the initial conditions here are
! compatible with the contents of include/hdpnlt_rkstep2.f90.
!     x0     : x coordinate of the center of the obstacle (in units of Lx)
!     y0     : y coordinate of the center of the obstacle (in units of Lx)
!     z0     : z coordinate of the center of the obstacle (in units of Lz)
!     radius : radius of the obstacle (in physical units)
!     vparam0: rate at which the mean velocity is increased

! Creates the penalty function
!$omp parallel do if (kend-ksta.ge.nth) private (j,i)
      DO k = ksta,kend
!$omp parallel do if (kend-ksta.lt.nth) private (i)
         DO j = 1,ny
            DO i = 1,nx	    
	    ! Creates the sphere
	    vparam3 = sqrt((2*pi*Lx*(i-nx*x0)/nx)**2 + (2*pi*Ly*(j-ny*y0)/ny)**2 + (2*pi*Lz*(k-nz*z0)/nz)**2)
	    chi(i,j,k) = (0.5)*(1 + tanh(75.0*(1-(vparam3/radius))))
	    ! Creates a grid
	    !IF ((i == 1 .OR. i == 2) .AND. &
    	    ! 	(((j >= (ny/6-ny/50) .AND. j <= (ny/6+ny/50)) .OR. (j >= (ny/2-ny/50) .AND. j <= (ny/2+ny/50)) &
	    !	.OR. (j >= (5*ny/6-ny/50) .AND. j <= (5*ny/6+ny/50)) .OR. &
    	    !	((k >= (nz/6-nz/50) .AND. k <= (nz/6+nz/50))) .OR. (k >= (nz/2-nz/50) .AND. k <= (nz/2+nz/50)) &
	    !	.OR. (k >= (5*ny/6-ny/50) .AND. k <= (5*ny/6+ny/50))))) THEN
	    !	chi(i,j,k) = 1.0_GP
	    !ENDIF
            END DO
         END DO
      END DO

! Initializes the velocity
!$omp parallel do if (kend-ksta.ge.nth) private (j,i)
      DO k = ksta,kend
!$omp parallel do if (kend-ksta.lt.nth) private (i)
         DO j = 1,ny
            DO i = 1,nx	    
	    	R1(i,j,k) = vparam0*(1 - chi(i,j,k)) 
            END DO
         END DO
      END DO
      CALL fftp3d_real_to_complex(planrc,R1,vx,MPI_COMM_WORLD)
      vy = 0.0_GP
      vz = 0.0_GP
