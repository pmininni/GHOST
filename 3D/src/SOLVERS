Solvers supported by the main code and tools for analysis
=========================================================

0. I/O and FFT libraries
========================

All the solvers and analysis tools work with the following parallel 
FFT libraries (pass 'FFTP=' to the make command to change the default):

   fftp-3 parallel FFT library to link with FFTW 3.x [DEFAULT]
   fftp-2 parallel FFT library to link with FFTW 2.x

and with the following I/O libraries (pass 'IOLIB=' to change the 
default):

   mpiio  MPI I/O, one file for all processors [DEFAULT]
   posix  posix I/O, one file per processor

1. main
=======

The main code is built using 'make' or 'make main'. The following 
solvers are currently supported (pass 'SOLVER=' to the make command 
to build a solver other than the default):

   HD         Hydrodynamic (HD) solver [DEFAULT]
   PHD        Hydrodynamic solver with passive scalar
   MPHD       Hydrodynamic solver with multi-scalar
   MHD        Magnetohydrodynamic (MHD) solver
   MHDB       MHD solver with a uniform magnetic field
   RMHDB      MHD solver with uniform magnetic field and rotation
   HMHD       Hall-MHD solver
   HMHDB      HMHD solver with a uniform magnetic field
   COMPRHD    Compressible HD solver
   COMPIHD    Compressible HD solver, evolving int. energy density
   CMHD       Compressible MHD solver
   CMHDB      Compressible MHD solver with uniform B_0
   CHMHD      Compressible Hall-MHD solver
   CHMHDB     Compressible Hall-MHD solver with uniform B_0
   ROTH       HD solver in a rotating frame
   PROTH      ROTH solver with passive scalar
   MPROTH     ROTH solver with multi-scalar
   BOUSS      Boussinesq solver
   ROTBOUSS   BOUSS solver in a rotating frame
   ROTBOUSSSTS BOUSS solver in a rotating frame with ML-SGS terms
   ROTBOUMHDB BOUSS and MHD solver with rotation and B_0
   MPROTBOUSS BOUSS solver in a rotating frame with multi-scalar
   MOIST_SOL  MOIST Boussinesq solver
   HDPNLT     HD solver with the penalty method
   GPE        Gross-Pitaevskii Equation (GPE) solver
   ARGL       Advective Real Ginzburg Landau solver
   RGPE       Rotating GPE solver with trapping potential
   RARGL      Rotating ARGL solver with trapping potential
   LAHD       Lagrangian-averaged HD solver
   CAHD       Clark-alpha HD solver
   LHD        Leray HD solver
   LAMHD      Lagrangian-averaged MHD solver
   EDQNMHD    EDQNM HD solver
   EDQNMROTH  EDQNM ROTH solver
   HPIC_SOL       builds the hybrid PIC solver
   EHPIC_SOL      builds the hybrid electrostatic PIC solver

2. utils
========

GHOST has several utilities to perform analysis of turbulent flows
using the outputs produced by different solvers, or to do 
post-processing of the data. Sources for these utilities can be
found in GHOST/3D/src/analysis (see the sources for more details). 
Note many of these tools may only work in some specific domains 
(e.g., in cubic domains with isotropic grids), or be only fully
supported in GHOST v1. The following utilities can be currently 
built ('make util_name'):

   boots  Regrids data to higher spatial resolution
   trunc  Truncates data to lower spatial resolution
   cancel Computes cancellation exponents
   shear  Computes strain rate tensor
   vt     Computes velocity gradient tensor
   wv     Computes wave-vortical decomposition
   trans  Computes shell-to-shell transfer (see below)
   triad  Computes triadic transfer functions (see below)
   struc  Computes structure functions (see below)

The utilities 'boots' and 'trunc' can also be used to change
data endianness.

3. trans
========

The code to compute shell-to-shell transfers is built with 
'make trans'. The following solvers are currently supported (use 
'SOLVER='):

   HD     HD transfer functions [DEFAULT]
   MHD    MHD transfer functions
   HMHD   Hall-MHD transfer functions
   ROTH   transfer functions for HD in a rotating frame

4. triad
========

The code to compute triadic transfer functions is built with 
'make triad'. The following solvers are currently supported (use 
'SOLVER='):

   HD     HD transfer functions [DEFAULT]

5. struc
========

The code to compute structure functions is built with 'make struc'. 
The following solvers are currently supported (use 'SOLVER='):

   HD     HD SO(3) structure functions [DEFAULT]
   ROTH   ROTH SO(2) structure functions
